import { readFile } from "node:fs/promises";
import path from 'path';
import axios from 'axios';
import JSON5 from 'json5';

import OpenAI from 'openai';
const openai = new OpenAI({
    apiKey: process.env.NEXT_OPENROUTER_KEY,
    baseURL: "https://openrouter.ai/api/v1"
});

export default async function handler(req, res) {
    if (req.method === 'POST') {
        // let prompt = req.body.prompt;
        // let title = req.body.title;
        // let priorPrompts = req.body.priorPrompts;
        let {chart, priorPrompts} = req.body;
        try {
            if (!chart || !priorPrompts || chart.type != 'bar') {
                return res.status(400).json({ error: 'Invalid input' });
            } 
            let note = await suggestNote(chart, priorPrompts);
            // let note = "ok";
            return res.status(200).json({ res: note });
        } catch (error) {
            console.error(error);
            return res.status(500).json({ error: 'Graph generation failed' });
        }
    } else {
        res.setHeader('Allow', ['POST']);
        return res.status(405).end(`Method ${req.method} Not Allowed`);
    }
}

async function suggestNote(chart, priorPrompts) {
    let maxTries = 5;
    for (let i = 0; i < maxTries; i++) {
        try {
            const input = `You will be given the metadata of a bar chart that illustrates the evaluation results of several batches of images generated by a text-to-image model on ${chart.title}. Each item within the metadata contains the following fields: 'batch', 'count', and 'dataItem', where 'batch' refers to the batch number, 'dataItem' refers to the name of the category, and 'count' refers to the number of images in that batch and category. Now a user who is auditing the text-to-image model has bookmarked the chart and would like to write some notes about his auditing insights. Please suggest some brief auditing notes (<25 words) for the user to note down. The notes should be concise and relevant to the chart. \nChart metadata: ${JSON5.stringify(chart.data)}\nThe prompts used in the generation of each image batch: ${JSON5.stringify(priorPrompts)}. Put your answer in '\\boxed{}'. Your suggestion:`;

            
            console.log("input: ", input)
            
            const completion = await openai.chat.completions.create({
                model: "google/gemini-2.5-flash-lite",  
                messages: [
                    { role: "system", content: "You are a helpful assistant." },
                    { role: "user", content: input }
                ],
                temperature: 1.0, // Standard temperature for varied note suggestions
            });
            
            // console.log(completion.choices[0].message);
            let output = completion.choices[0].message.content;
            console.log("output: ", output);

            // check if \box{} is in the output
            let start = output.indexOf('\\boxed{');
            if (start == -1) {
                throw new Error("Output does not have the required fields: " + JSON.stringify(output));
            }
            let end = output.indexOf('}', start);
            if (end == -1) {
                throw new Error("Output does not have the required fields: " + JSON.stringify(output));
            }
            output = output.substring(start + 7, end);
            return output;
        } catch (error) {
            console.log(error);
            if (i == maxTries - 1) {
                throw error;
            }
        }
    }


}



//=> "The number of parameters in a neural network can impact ...